#Область ОбработчикиСобытийФормы

#КонецОбласти


//////////////////////////////////////////


#Область ОбработчикиСобытийЭлементовФормы

#КонецОбласти


//////////////////////////////////////////


#Область ОбработчикиКомандФормы     

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	ОбновитьСписокНаСервере(); 
	//ПроверитьСуществующихПользователей()
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПользователей(Команда)
	СоздатьПользователейНаСервере(); 
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОтчет(Команда)
	ТабДок = СоздатьОтчетНаСервере();
	ПутьКФайлу = "D:\Почта\";
	ИмяФайла = "ОтчетПоМагазинам.pdf";
	ПолноеИмяФайла = ПутьКФайлу + ИмяФайла;
	ТабДок.Показать("Отчет");	
	ВыгрузитьТДвФайл(ТабДок, ПолноеИмяФайла); 
	
	Файл = Новый ДвоичныеДанные(ПолноеИмяФайла);
	файлДляОтправки = КоннекторHTTP.НовыйОтправляемыйФайл("ОтчетПоМагазинам", ИмяФайла, Файл, "PDF");	
	
	//ОтправитьДЖСОН(файлДляОтправки, "996600001");
	
КонецПроцедуры



#КонецОбласти


//////////////////////////////////////////


#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция СтруктураИзДжсон(джсон)	
	ЧтениеДжсон = Новый ЧтениеJSON;
	ЧтениеДжсон.УстановитьСтроку(джсон);
	Попытка
		Результат = ПрочитатьJSON(ЧтениеДжсон);   
	Исключение
		Результат = Новый Структура;	
	КонецПопытки;
	ЧтениеДжсон.Закрыть();  
	Возврат Результат;
КонецФункции

&НаСервере
Функция ДжсонИзСтруктуры(Структура)
	Джсон = Новый ЗаписьJSON;
	Джсон.УстановитьСтроку();
	ЗаписатьJSON(Джсон, Структура);
	Возврат Джсон.Закрыть();
КонецФункции 

Процедура ОтправитьДЖСОН(Данные, ИдентификаторПолучателя) 
	ОбменСервер = "api.telegram.org"; 
	ОбменАдрес	= "bot6131297068:AAHk1AbCRpq5gm4kkYiKKp__vfREeDOZASY/sendDocument";	
	Сервер = ОбменСервер;		
	Соединение = Новый HTTPСоединение(Сервер,443,,,,, Новый ЗащищенноеСоединениеOpenSSL);

	ПотокВПамяти = Новый ПотокВПамяти;
	ЗаписьДанных = Новый ЗаписьДанных(ПотокВПамяти);
	
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type","multipart/form-data");
	Заголовки.Вставить("Content-Type","application/json");
	
	// ЗАГОЛОВКИ     
	//Content-Length: 232 // длина сообщения, не обязательна
	//Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW // определение типа данных и указание разделителя
				
	Разделитель ="razer"; 
	КартинкаИмяПараметра = "file";
	
	
	Заголовки = Новый Соответствие; 	
	Заголовки.Вставить("Content-Type","multipart/form-data; boundary=" + Разделитель);
	
 // chat_id
  ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
  ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""chat_id""");
  ЗаписьДанных.ЗаписатьСтроку("");
  ЗаписьДанных.ЗаписатьСтроку(ИдентификаторПолучателя);
	//
	//// disable_notification
	//ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
	//ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""disable_notification""");
	//ЗаписьДанных.ЗаписатьСтроку("");
	//ЗаписьДанных.ЗаписатьСтроку("True");	
	
	// document    
	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);
	ЗаписьДанных.ЗаписатьСтроку(СтрШаблон("Content-Disposition: form-data; name=""document""; filename=""%1""", Данные.ИмяФайла));
	ЗаписьДанных.ЗаписатьСтроку("Content-Type: application/pdf");
	ЗаписьДанных.ЗаписатьСтроку("");  
	
	ЗаписьДанных.Записать(Данные.Данные);
	
	ЗаписьДанных.ЗаписатьСтроку("");
	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель + "--");
	ЗаписьДанных.Закрыть(); 
	
	ТелоЗапроса = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
	
	Запрос = Новый HTTPЗапрос(ОбменАдрес, Заголовки);     
	Запрос.УстановитьТелоИзДвоичныхДанных(ТелоЗапроса);
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос); 
		ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
		Если Ответ.КодСостояния >= 400 и Ответ.КодСостояния < 500 Тогда
			Сообщить("Ошшибка отправки данных");	
		КонецЕсли;	
	Исключение
		Сообщить("Не удолось соединиться с базой");
	КонецПопытки;
	
КонецПроцедуры // ()


&НаСервере
Процедура ОбновитьСписокНаСервере()
	Адрес = "https://api.telegram.org/bot6131297068:AAHk1AbCRpq5gm4kkYiKKp__vfREeDOZASY/getUpdates";
	Ответ = КоннекторHTTP.GetJson(Адрес);     
	
	Пользователи.Очистить();
	
	
	Если Ответ.Получить("result") <> Неопределено Тогда
		Для каждого Результат Из Ответ.Получить("result") Цикл  
			нПользователь = Пользователи.Добавить();

			Если Результат.Получить("message") <> Неопределено Тогда
				Для каждого Сообщение Из Результат.Получить("message") Цикл	   		
					
					Если Сообщение.Ключ = "text" Тогда 
						нПользователь.Сообщение = Сообщение.Значение;
					КонецЕсли;
							
					Если Сообщение.Ключ = "chat" Тогда   
						
						Для каждого ДанныеЧата Из Сообщение.Значение Цикл	
							  	
							Если ДанныеЧата.Ключ = "id" Тогда 
								нПользователь.ИД = Формат(ДанныеЧата.Значение, "ЧГ=0");
							КонецЕсли;
							Если ДанныеЧата.Ключ = "first_name" Тогда 
								нПользователь.Имя = ДанныеЧата.Значение;
							КонецЕсли;
							Если ДанныеЧата.Ключ = "last_name" Тогда 
								нПользователь.Фамилия = ДанныеЧата.Значение;
							КонецЕсли;
													
						КонецЦикла;	
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСуществующихПользователей()
 	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.ИД КАК ИД,
		|	Пользователи.Фамилия КАК Фамилия,
		|	Пользователи.Имя КАК Имя,
		|	Пользователи.Создать КАК Создать
		|ПОМЕСТИТЬ втПользователи
		|ИЗ
		|	&Пользователи КАК Пользователи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПользователи.ИД КАК ИД,
		|	втПользователи.Фамилия КАК Фамилия,
		|	втПользователи.Имя КАК Имя,
		|	втПользователи.Создать КАК Создать
		|ИЗ
		|	РегистрСведений.тгБотПользователи КАК тгБотПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПользователи КАК втПользователи
		|		ПО (втПользователи.ИД <> тгБотПользователи.ИД)";
	
	Запрос.Параметры.Вставить("Пользователи", Пользователи.Выгрузить()); 
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Для Каждого Строка Из Пользователи Цикл
			Строка.Создать = Истина;
		КонецЦикла;
		
		
	КонецЕсли;
	
	
	Пока Выборка.Следующий() Цикл
		НайденаяСтрока =  Пользователи.НайтиСтроки(Новый Структура("Создать,ИД", Ложь, Выборка.ИД));
		Если НайденаяСтрока.Количество() <> 0 Тогда 
			Для каждого Строка из НайденаяСтрока Цикл
				Строка.Создать = Истина;	
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;


КонецПроцедуры 

&НаСервере
Процедура СоздатьПользователейНаСервере()
	
	Для Каждого Строка Из Пользователи Цикл  
		Если Строка.Создать Тогда  
			МенеджерЗаписи = РегистрыСведений.тгБотПользователи.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Строка);
			МенеджерЗаписи.Записать();    
		КонецЕсли;
		
	КонецЦикла; 
	
	
КонецПроцедуры

&НаСервере
Функция СоздатьОтчетНаСервере() Экспорт	
  НачалоПериода =  НачалоДня(ТекущаяДата()) - 60 * 60 * 24 * 28;
	КонецПериода = КонецДня(ТекущаяДата()- 60 * 60 * 24);
	ТекДата = ТекущаяДатаСеанса();
	
	ТабДок = Новый ТабличныйДокумент; 
	ТабДок.РазмерСтраницы = "A4"; 
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	
	СхемаКомпоновкиДанных = Отчеты.ВедомостьПоТоварамНаСкладах.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	//Ключ = "Ведомость по товарам на складах";
	Пользователь = Справочники.Пользователи.НайтиПоНаименованию("Макашкина Елена");
	ВариантыОтчета = ВариантыОтчетов.КлючиВариантовОтчета("Отчет.ВедомостьПоТоварамНаСкладах", Пользователь);	
  ВариантОтчетаМетаданных = Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоНаименованию("Ведомость по товарам на складах (Отчет)");
	КлючВарианта = Неопределено;
	
	Для каждого ВариантОтчета Из ВариантыОтчета Цикл
		Если ВариантОтчета.Представление = "ОСТАТКИ товары в магазинах" Тогда
			 КлючВарианта = ВариантОтчета.Значение;   
			 Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ВариантОтчета = ВариантыОтчетов.ВариантОтчета(ВариантОтчетаМетаданных, КлючВарианта);
	
	//Стыврит настройки пользователя
	//Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	Настройки =  ВариантОтчета.Настройки.Получить();
	ПараметрыВывода = Настройки.ПараметрыВывода.Элементы;
	ПараметрыВывода.Найти("ВыводитьПараметрыДанных").Значение = Ложь;
	Период = Настройки.ПараметрыДанных.Элементы.Найти("Период");
	Период.Значение.ДатаНачала = НачалоПериода;
	Период.Значение.ДатаОкончания = КонецПериода;  
	
	Настройки.Структура[0].Структура[0].Структура[0].Использование = Истина;
	
	
	Расшифровка = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, Расшифровка);
	МакетКомпоновки.ЗначенияПараметров.ТекущаяДата.Значение = ТекДата;
	
	ВнешниеПараметры = Новый Структура;
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ,Расшифровка);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабДок);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	Возврат ТабДок;
КонецФункции

&НаСервере
Функция НайтиОтчетПоНаименованию(Наименование)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВариантыОтчетов.Отчет КАК Отчет
		|ИЗ
		|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
		|ГДЕ
		|	ВариантыОтчетов.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Отчет;
	Иначе 
		Справочники.ВариантыОтчетов.ПустаяСсылка();
	КонецЕсли;
КонецФункции 

&НаСервере
Процедура ВыгрузитьТДвФайл(ТабДок, ПолноеИмяФайла) Экспорт     
	ТекстПисьма = "";
	Попытка
		ТабДок.Записать(ПолноеИмяФайла,ТипФайлаТабличногоДокумента.PDF);	
	Исключение
		ТекстПисьма = ТекстПисьма + "Не удалось создать файл! " + ОписаниеОшибки() + Символы.ПС;
	КонецПопытки;   
	
	//МоиРегламентыеЗадания.ОтправитьСообщениеТелеграмм(ТекстПисьма);

КонецПроцедуры

#КонецОбласти
